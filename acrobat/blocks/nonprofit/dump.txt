function getOrganizationSelect() {
  const controlTag = createTag('div', { class: 'np-control' });
  const labelTag = createTag(
    'label',
    { class: 'np-label', for: 'organization' },
    metadata.labels.organizationNameOrId,
  );
  const searchTag = createTag('input', {
    class: 'np-input np-organization-select-search',
    name: 'organization',
    type: 'text',
    placeholder: metadata.labels.organizationNameOrIdSerachPlaceholder,
    required: 'required',
  });

  const listContainerTag = createTag('div', { class: 'np-organization-select-list-container' });
  const listTag = createTag('ul', { class: 'np-organization-select-list' });

  let searchTimeout;
  let abortController;

  const showList = () => {
    listContainerTag.style.display = 'block';
  };

  const hideList = () => {
    abortController?.abort();
    listContainerTag.style.display = 'none';
    if (selectedOrganizationStore.data) {
      searchTag.value = selectedOrganizationStore.data.name;
      organizationsStore.update([selectedOrganizationStore.data]);
    }
  };

  // Search onChange
  searchTag.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    abortController?.abort();

    if (!searchTag.value) {
      hideList();
      return;
    }

    abortController = new AbortController();
    searchTimeout = setTimeout(() => {
      organizationsStore.startLoading();
      showList();
      fetchOrganizations(searchTag.value, abortController);
    }, SEARCH_DEBOUNCE);
  });

  searchTag.addEventListener('focus', () => {
    if (!searchTag.value) return;
    showList();
  });

  searchTag.addEventListener('keydown', (ev) => {
    if (ev.code !== 'ArrowUp' && ev.code !== 'ArrowDown') return;
    ev.preventDefault();
    if (ev.code === 'ArrowDown') {
      const listItem = document.querySelector('.np-organization-select-item');
      if (listItem) listItem.focus();
    }
  });

  const organizationSelectFocusOut = (ev) => {
    if (!ev.relatedTarget) {
      hideList();
      return;
    }
    const organizationSelectTag = ev.relatedTarget.closest('.np-organization-select-tag');
    // If the newly focused item is part of the select, don't hide list
    if (organizationSelectTag) return;
    hideList();
  };

  searchTag.addEventListener('focusout', organizationSelectFocusOut);
  organizationsStore.subscribe((organizations) => {
    console.log('organizations updated: ', organizations.length);
  });
  // Render organization elements
  organizationsStore.subscribe((organizations, loading) => {
    // Empty the list
    listTag.replaceChildren();

    organizations.forEach((organization) => {
      const itemTag = createTag('li', {
        class: 'np-organization-select-tag np-organization-select-item',
        tabindex: -1,
      });

      const nameTag = createTag(
        'span',
        { class: 'np-organization-select-name' },
        organization.name,
      );
      const idTag = createTag('span', { class: 'np-organization-select-id' }, organization.id);

      itemTag.append(nameTag, idTag);

      // Item focus handing
      itemTag.addEventListener('focusout', organizationSelectFocusOut);
      itemTag.addEventListener('keydown', (ev) => {
        if (ev.code !== 'ArrowUp' && ev.code !== 'ArrowDown') return;
        ev.preventDefault();
        let sibling;
        if (ev.code === 'ArrowDown') {
          sibling = ev.target.nextElementSibling;
        }
        if (ev.code === 'ArrowUp') {
          sibling = ev.target.previousElementSibling;
        }
        if (sibling && !sibling.classList.contains('np-organization-select-loader')) {
          sibling.focus();
        }
      });

      // Selection handling
      const selectItem = () => {
        hideList();
        searchTag.value = organization.name;
        selectedOrganizationStore.update(organization);
        organizationsStore.update([organization]);
      };
      itemTag.addEventListener('click', selectItem);
      itemTag.addEventListener('keydown', (ev) => {
        if (ev.code !== 'Enter') return;
        selectItem();
      });

      listTag.append(itemTag);
    });

    if (loading) {
      const loadingTag = createTag(
        'div',
        { class: 'np-organization-select-tag np-organization-select-loader' },
        'Loading...',
      );
      listTag.append(loadingTag);
    }
  }, false);

  listTag.addEventListener('scroll', () => {
    if (Boolean(selectedOrganizationStore.data) || organizationsStore.loading || !nextPageUrl) return;
    if (listTag.scrollTop + listTag.clientHeight + FETCH_ON_SCROLL_OFFSET >= listTag.scrollHeight) {
      abortController = new AbortController();
      organizationsStore.startLoading(false);
      fetchNextOrganizations(abortController);
    }
  });

  listContainerTag.append(listTag);

  // Render 'cannot find' link
  const cannotFindTag = createTag('div', { class: 'np-organization-select-tag np-organization-select-cannot-find' });
  const cannotFindLinkTag = createTag('a', { tabindex: 0 }, metadata.labels.organizationCannotFind);
  // Cannot find action handler
  const switchToNotFound = () => {
    nonprofitStore.update({ step: 2, scenario: scenarios.NOT_FOUND_IN_SEARCH });
  };
  cannotFindLinkTag.addEventListener('click', switchToNotFound);
  cannotFindLinkTag.addEventListener('keydown', (ev) => {
    if (ev.code !== 'Enter') return;
    switchToNotFound();
  });

  cannotFindLinkTag.addEventListener('focusout', organizationSelectFocusOut);

  cannotFindTag.append(cannotFindLinkTag);
  listContainerTag.append(cannotFindTag);

  controlTag.append(labelTag, searchTag, listContainerTag);
  return controlTag;
}